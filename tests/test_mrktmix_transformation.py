import numpy as np
import pandas as pd

from mrktmix import transformation as dp


def test_apply_coef_():
    # without dependent without panel
    coef_ind = [("Intercept", 0, 1, 0), ("A", 0, 1, 0), ("B", 0, 1, 0), ("D", 0, 1, 0)]
    coef_2 = pd.Series(data=[3240, 600, 10, 0.9], index=coef_ind)
    df_ind = [np.array(["1/1/2018", "2/1/2018", "3/1/2018", "4/1/2018", "5/1/2018"])]
    df_2 = pd.DataFrame({'A': [773, 137, 508, 562, 365],
                         'B': [848, 326, 969, 730, 761],
                         'C': [292, 867, 323, 910, 729],
                         'D': [479532., 85700., 307530., 347654., 229367.]}, index=df_ind)
    df_2["Intercept"] = 1
    expected_output = {('Intercept', 0, 1, 0): {('1/1/2018',): 3240.0,
      ('2/1/2018',): 3240.0,
      ('3/1/2018',): 3240.0,
      ('4/1/2018',): 3240.0,
      ('5/1/2018',): 3240.0},
     ('A', 0, 1, 0): {('1/1/2018',): 463800.0,
      ('2/1/2018',): 82200.0,
      ('3/1/2018',): 304800.0,
      ('4/1/2018',): 337200.0,
      ('5/1/2018',): 219000.0},
     ('B', 0, 1, 0): {('1/1/2018',): 8480.0,
      ('2/1/2018',): 3260.0,
      ('3/1/2018',): 9690.0,
      ('4/1/2018',): 7300.0,
      ('5/1/2018',): 7610.0},
     ('D', 0, 1, 0): {('1/1/2018',): 431578.8,
      ('2/1/2018',): 77130.0,
      ('3/1/2018',): 276777.0,
      ('4/1/2018',): 312888.60000000003,
      ('5/1/2018',): 206430.30000000002}}
    expected_output = pd.DataFrame(expected_output)
    expected_output.columns.names = ["Variable", "Adstock", "Power", "Lag"]
    pd.testing.assert_frame_equal(dp.apply_coef_(df_2, coef_2, None), expected_output)

    # with dependent without panel
    coef_ind = [("Intercept", 0, 1, 0), ("A", 0, 1, 0), ("B", 0, 1, 0), ("D", 0, 1, 0)]
    coef_2 = pd.Series(data=[3240, 600, 10, 0.9], index=coef_ind)
    df_ind = [np.array(["1/1/2018", "2/1/2018", "3/1/2018", "4/1/2018", "5/1/2018"])]
    df_2 = pd.DataFrame({'A': [773, 137, 508, 562, 365],
                         'B': [848, 326, 969, 730, 761],
                         'C': [292, 867, 323, 910, 729],
                         'D': [479532., 85700., 307530., 347654., 229367.]}, index=df_ind)
    df_2["Intercept"] = 1
    expected_output = {('Intercept', 0, 1, 0): {('1/1/2018',): 3240.0,
      ('2/1/2018',): 3240.0,
      ('3/1/2018',): 3240.0,
      ('4/1/2018',): 3240.0,
      ('5/1/2018',): 3240.0},
     ('A', 0, 1, 0): {('1/1/2018',): 463800.0,
      ('2/1/2018',): 82200.0,
      ('3/1/2018',): 304800.0,
      ('4/1/2018',): 337200.0,
      ('5/1/2018',): 219000.0},
     ('B', 0, 1, 0): {('1/1/2018',): 8480.0,
      ('2/1/2018',): 3260.0,
      ('3/1/2018',): 9690.0,
      ('4/1/2018',): 7300.0,
      ('5/1/2018',): 7610.0},
     ('D', 0, 1, 0): {('1/1/2018',): 431578.8,
      ('2/1/2018',): 77130.0,
      ('3/1/2018',): 276777.0,
      ('4/1/2018',): 312888.60000000003,
      ('5/1/2018',): 206430.30000000002},
     ('Residual', 0, 1, 0): {('1/1/2018',): -906325.8,
      ('2/1/2018',): -165693.0,
      ('3/1/2018',): -593999.0,
      ('4/1/2018',): -660066.6000000001,
      ('5/1/2018',): -435915.30000000005}}
    expected_output = pd.DataFrame(expected_output)
    expected_output.columns.names = ["Variable", "Adstock", "Power", "Lag"]
    pd.testing.assert_frame_equal(dp.apply_coef_(df_2, coef_2, df_2["A"]), expected_output)

    # without dependent with panel
    coef_ind = [["METRO", "METRO", "METRO", "METRO", "REGIONAL", "REGIONAL", "REGIONAL", "REGIONAL", "VILLAGE", "VILLAGE", "VILLAGE",
                 "VILLAGE"], [("Intercept", 0, 1, 0), ("A", 0, 1, 0), ("B", 0, 1, 0), ("D", 0, 1, 0), ("Intercept", 0, 1, 0),
                              ("A", 0, 1, 0), ("B", 0, 1, 0), ("D", 0, 1, 0), ("Intercept", 0, 1, 0), ("A", 0, 1, 0), ("B", 0, 1, 0),
                              ("D", 0, 1, 0)]]
    coef_2 = pd.Series(data=[3240, 600, 10, 0.9, 90000, 0.6, 20, 0.9, 500, 25, 100, 0.9], index=coef_ind)
    df_ind = [np.array(["METRO", "METRO", "METRO", "METRO", "METRO", "REGIONAL", "REGIONAL", "REGIONAL", "REGIONAL", "REGIONAL", "VILLAGE",
                        "VILLAGE", "VILLAGE", "VILLAGE", "VILLAGE"]),
              np.array(["1/1/2018", "2/1/2018", "3/1/2018", "4/1/2018", "5/1/2018", "1/1/2018", "2/1/2018", "3/1/2018", "4/1/2018",
                        "5/1/2018", "1/1/2018", "2/1/2018", "3/1/2018", "4/1/2018", "5/1/2018"])]
    df_2 = pd.DataFrame({'A': [773, 137, 508, 562, 365, 500, 100, 400, 79, 365, 773, 137, 508, 562, 365],
                         'B': [848, 326, 969, 730, 761, 137, 508, 562, 365, 761, 848, 326, 969, 730, 761],
                         'C': [292, 867, 323, 910, 729, 326, 969, 730, 761, 729, 292, 867, 323, 910, 729],
                         'D': [479532., 85700., 307530., 347654., 229367., 92130., 99820., 103480., 97567.5, 105322., 104699., 36128.,
                               110005., 89533., 85296.]}, index=df_ind)
    df_2["Intercept"] = 1
    expected_output = {('A', 0, 1, 0): {('METRO', '1/1/2018'): 463800.0,
                                        ('METRO', '2/1/2018'): 82200.0,
                                        ('METRO', '3/1/2018'): 304800.0,
                                        ('METRO', '4/1/2018'): 337200.0,
                                        ('METRO', '5/1/2018'): 219000.0,
                                        ('REGIONAL', '1/1/2018'): 300.0,
                                        ('REGIONAL', '2/1/2018'): 60.0,
                                        ('REGIONAL', '3/1/2018'): 240.0,
                                        ('REGIONAL', '4/1/2018'): 47.4,
                                        ('REGIONAL', '5/1/2018'): 219.0,
                                        ('VILLAGE', '1/1/2018'): 19325.0,
                                        ('VILLAGE', '2/1/2018'): 3425.0,
                                        ('VILLAGE', '3/1/2018'): 12700.0,
                                        ('VILLAGE', '4/1/2018'): 14050.0,
                                        ('VILLAGE', '5/1/2018'): 9125.0},
                       ('B', 0, 1, 0): {('METRO', '1/1/2018'): 8480.0,
                                        ('METRO', '2/1/2018'): 3260.0,
                                        ('METRO', '3/1/2018'): 9690.0,
                                        ('METRO', '4/1/2018'): 7300.0,
                                        ('METRO', '5/1/2018'): 7610.0,
                                        ('REGIONAL', '1/1/2018'): 2740.0,
                                        ('REGIONAL', '2/1/2018'): 10160.0,
                                        ('REGIONAL', '3/1/2018'): 11240.0,
                                        ('REGIONAL', '4/1/2018'): 7300.0,
                                        ('REGIONAL', '5/1/2018'): 15220.0,
                                        ('VILLAGE', '1/1/2018'): 84800.0,
                                        ('VILLAGE', '2/1/2018'): 32600.0,
                                        ('VILLAGE', '3/1/2018'): 96900.0,
                                        ('VILLAGE', '4/1/2018'): 73000.0,
                                        ('VILLAGE', '5/1/2018'): 76100.0},
                       ('D', 0, 1, 0): {('METRO', '1/1/2018'): 431578.8,
                                        ('METRO', '2/1/2018'): 77130.0,
                                        ('METRO', '3/1/2018'): 276777.0,
                                        ('METRO', '4/1/2018'): 312888.60000000003,
                                        ('METRO', '5/1/2018'): 206430.30000000002,
                                        ('REGIONAL', '1/1/2018'): 82917.0,
                                        ('REGIONAL', '2/1/2018'): 89838.0,
                                        ('REGIONAL', '3/1/2018'): 93132.0,
                                        ('REGIONAL', '4/1/2018'): 87810.75,
                                        ('REGIONAL', '5/1/2018'): 94789.8,
                                        ('VILLAGE', '1/1/2018'): 94229.1,
                                        ('VILLAGE', '2/1/2018'): 32515.2,
                                        ('VILLAGE', '3/1/2018'): 99004.5,
                                        ('VILLAGE', '4/1/2018'): 80579.7,
                                        ('VILLAGE', '5/1/2018'): 76766.40000000001},
                       ('Intercept', 0, 1, 0): {('METRO', '1/1/2018'): 3240.0,
                                                ('METRO', '2/1/2018'): 3240.0,
                                                ('METRO', '3/1/2018'): 3240.0,
                                                ('METRO', '4/1/2018'): 3240.0,
                                                ('METRO', '5/1/2018'): 3240.0,
                                                ('REGIONAL', '1/1/2018'): 90000.0,
                                                ('REGIONAL', '2/1/2018'): 90000.0,
                                                ('REGIONAL', '3/1/2018'): 90000.0,
                                                ('REGIONAL', '4/1/2018'): 90000.0,
                                                ('REGIONAL', '5/1/2018'): 90000.0,
                                                ('VILLAGE', '1/1/2018'): 500.0,
                                                ('VILLAGE', '2/1/2018'): 500.0,
                                                ('VILLAGE', '3/1/2018'): 500.0,
                                                ('VILLAGE', '4/1/2018'): 500.0,
                                                ('VILLAGE', '5/1/2018'): 500.0}}
    expected_output = pd.DataFrame(expected_output)
    expected_output.columns.names = ["Variable", "Adstock", "Power", "Lag"]
    pd.testing.assert_frame_equal(dp.apply_coef_(df_2, coef_2, None), expected_output)
    # with dependent with panel
    coef_ind = [["METRO", "METRO", "METRO", "METRO", "REGIONAL", "REGIONAL", "REGIONAL", "REGIONAL", "VILLAGE", "VILLAGE", "VILLAGE",
                 "VILLAGE"],
                [("Intercept", 0, 1, 0), ("A", 0, 1, 0), ("B", 0, 1, 0), ("D", 0, 1, 0), ("Intercept", 0, 1, 0), ("A", 0, 1, 0),
                 ("B", 0, 1, 0), ("D", 0, 1, 0), ("Intercept", 0, 1, 0), ("A", 0, 1, 0), ("B", 0, 1, 0), ("D", 0, 1, 0)]]
    coef_2 = pd.Series(data=[3240, 600, 10, 0.9, 90000, 0.6, 20, 0.9, 500, 25, 100, 0.9], index=coef_ind)
    df_ind = [np.array(["METRO", "METRO", "METRO", "METRO", "METRO", "REGIONAL", "REGIONAL", "REGIONAL", "REGIONAL", "REGIONAL", "VILLAGE",
                        "VILLAGE", "VILLAGE", "VILLAGE", "VILLAGE"]),
              np.array(["1/1/2018", "2/1/2018", "3/1/2018", "4/1/2018", "5/1/2018", "1/1/2018",
                        "2/1/2018", "3/1/2018", "4/1/2018", "5/1/2018", "1/1/2018", "2/1/2018", "3/1/2018", "4/1/2018", "5/1/2018"])]
    df_2 = pd.DataFrame({'A': [773, 137, 508, 562, 365, 500, 100, 400, 79, 365, 773, 137, 508, 562, 365],
                         'B': [848, 326, 969, 730, 761, 137, 508, 562, 365, 761, 848, 326, 969, 730, 761],
                         'C': [292, 867, 323, 910, 729, 326, 969, 730, 761, 729, 292, 867, 323, 910, 729],
                         'D': [479532., 85700., 307530., 347654., 229367., 92130., 99820., 103480., 97567.5, 105322., 104699., 36128.,
                               110005., 89533., 85296.]}, index=df_ind)
    df_2["Intercept"] = 1
    dep = pd.DataFrame({'Dep': [773, 137, 508, 562, 365, 500, 100, 400, 79, 365, 773, 137, 508, 562, 365]}, index=df_ind)
    expected_output = {('A', 0, 1, 0): {('METRO', '1/1/2018'): 463800.0,
                                        ('METRO', '2/1/2018'): 82200.0,
                                        ('METRO', '3/1/2018'): 304800.0,
                                        ('METRO', '4/1/2018'): 337200.0,
                                        ('METRO', '5/1/2018'): 219000.0,
                                        ('REGIONAL', '1/1/2018'): 300.0,
                                        ('REGIONAL', '2/1/2018'): 60.0,
                                        ('REGIONAL', '3/1/2018'): 240.0,
                                        ('REGIONAL', '4/1/2018'): 47.4,
                                        ('REGIONAL', '5/1/2018'): 219.0,
                                        ('VILLAGE', '1/1/2018'): 19325.0,
                                        ('VILLAGE', '2/1/2018'): 3425.0,
                                        ('VILLAGE', '3/1/2018'): 12700.0,
                                        ('VILLAGE', '4/1/2018'): 14050.0,
                                        ('VILLAGE', '5/1/2018'): 9125.0},
                       ('B', 0, 1, 0): {('METRO', '1/1/2018'): 8480.0,
                                        ('METRO', '2/1/2018'): 3260.0,
                                        ('METRO', '3/1/2018'): 9690.0,
                                        ('METRO', '4/1/2018'): 7300.0,
                                        ('METRO', '5/1/2018'): 7610.0,
                                        ('REGIONAL', '1/1/2018'): 2740.0,
                                        ('REGIONAL', '2/1/2018'): 10160.0,
                                        ('REGIONAL', '3/1/2018'): 11240.0,
                                        ('REGIONAL', '4/1/2018'): 7300.0,
                                        ('REGIONAL', '5/1/2018'): 15220.0,
                                        ('VILLAGE', '1/1/2018'): 84800.0,
                                        ('VILLAGE', '2/1/2018'): 32600.0,
                                        ('VILLAGE', '3/1/2018'): 96900.0,
                                        ('VILLAGE', '4/1/2018'): 73000.0,
                                        ('VILLAGE', '5/1/2018'): 76100.0},
                       ('D', 0, 1, 0): {('METRO', '1/1/2018'): 431578.8,
                                        ('METRO', '2/1/2018'): 77130.0,
                                        ('METRO', '3/1/2018'): 276777.0,
                                        ('METRO', '4/1/2018'): 312888.60000000003,
                                        ('METRO', '5/1/2018'): 206430.30000000002,
                                        ('REGIONAL', '1/1/2018'): 82917.0,
                                        ('REGIONAL', '2/1/2018'): 89838.0,
                                        ('REGIONAL', '3/1/2018'): 93132.0,
                                        ('REGIONAL', '4/1/2018'): 87810.75,
                                        ('REGIONAL', '5/1/2018'): 94789.8,
                                        ('VILLAGE', '1/1/2018'): 94229.1,
                                        ('VILLAGE', '2/1/2018'): 32515.2,
                                        ('VILLAGE', '3/1/2018'): 99004.5,
                                        ('VILLAGE', '4/1/2018'): 80579.7,
                                        ('VILLAGE', '5/1/2018'): 76766.40000000001},
                       ('Intercept', 0, 1, 0): {('METRO', '1/1/2018'): 3240.0,
                                                ('METRO', '2/1/2018'): 3240.0,
                                                ('METRO', '3/1/2018'): 3240.0,
                                                ('METRO', '4/1/2018'): 3240.0,
                                                ('METRO', '5/1/2018'): 3240.0,
                                                ('REGIONAL', '1/1/2018'): 90000.0,
                                                ('REGIONAL', '2/1/2018'): 90000.0,
                                                ('REGIONAL', '3/1/2018'): 90000.0,
                                                ('REGIONAL', '4/1/2018'): 90000.0,
                                                ('REGIONAL', '5/1/2018'): 90000.0,
                                                ('VILLAGE', '1/1/2018'): 500.0,
                                                ('VILLAGE', '2/1/2018'): 500.0,
                                                ('VILLAGE', '3/1/2018'): 500.0,
                                                ('VILLAGE', '4/1/2018'): 500.0,
                                                ('VILLAGE', '5/1/2018'): 500.0},
                       ('Residual', 0, 1, 0): {('METRO', '1/1/2018'): -906325.8,
                                               ('METRO', '2/1/2018'): -165693.0,
                                               ('METRO', '3/1/2018'): -593999.0,
                                               ('METRO', '4/1/2018'): -660066.6000000001,
                                               ('METRO', '5/1/2018'): -435915.30000000005,
                                               ('REGIONAL', '1/1/2018'): -175457.0,
                                               ('REGIONAL', '2/1/2018'): -189958.0,
                                               ('REGIONAL', '3/1/2018'): -194212.0,
                                               ('REGIONAL', '4/1/2018'): -185079.15,
                                               ('REGIONAL', '5/1/2018'): -199863.8,
                                               ('VILLAGE', '1/1/2018'): -198081.1,
                                               ('VILLAGE', '2/1/2018'): -68903.2,
                                               ('VILLAGE', '3/1/2018'): -208596.5,
                                               ('VILLAGE', '4/1/2018'): -167567.7,
                                               ('VILLAGE', '5/1/2018'): -162126.40000000002}}
    expected_output = pd.DataFrame(expected_output)
    expected_output.columns.names = ["Variable", "Adstock", "Power", "Lag"]
    pd.testing.assert_frame_equal(dp.apply_coef_(df_2, coef_2, dep["Dep"]), expected_output)

def test_apply_coef_node_():
    # one node in many panels
    df_2={'A': {('Panel1', '5/15/2020'): 150,
      ('Panel1', '5/22/2020'): 115,
      ('Panel1', '5/29/2020'): 166,
      ('Panel1', '6/5/2020'): 171,
      ('Panel1', '6/12/2020'): 195,
      ('Panel1', '6/19/2020'): 150,
      ('Panel1', '6/26/2020'): 127,
      ('Panel2', '5/15/2020'): 150,
      ('Panel2', '5/22/2020'): 115,
      ('Panel2', '5/29/2020'): 166,
      ('Panel2', '6/5/2020'): 171,
      ('Panel2', '6/12/2020'): 195,
      ('Panel2', '6/19/2020'): 150,
      ('Panel2', '6/26/2020'): 127},
     'B': {('Panel1', '5/15/2020'): 196,
      ('Panel1', '5/22/2020'): 150,
      ('Panel1', '5/29/2020'): 111,
      ('Panel1', '6/5/2020'): 148,
      ('Panel1', '6/12/2020'): 171,
      ('Panel1', '6/19/2020'): 179,
      ('Panel1', '6/26/2020'): 142,
      ('Panel2', '5/15/2020'): 196,
      ('Panel2', '5/22/2020'): 150,
      ('Panel2', '5/29/2020'): 111,
      ('Panel2', '6/5/2020'): 148,
      ('Panel2', '6/12/2020'): 171,
      ('Panel2', '6/19/2020'): 179,
      ('Panel2', '6/26/2020'): 142},
     'C': {('Panel1', '5/15/2020'): 148,
      ('Panel1', '5/22/2020'): 182,
      ('Panel1', '5/29/2020'): 162,
      ('Panel1', '6/5/2020'): 115,
      ('Panel1', '6/12/2020'): 171,
      ('Panel1', '6/19/2020'): 165,
      ('Panel1', '6/26/2020'): 189,
      ('Panel2', '5/15/2020'): 148,
      ('Panel2', '5/22/2020'): 182,
      ('Panel2', '5/29/2020'): 162,
      ('Panel2', '6/5/2020'): 115,
      ('Panel2', '6/12/2020'): 171,
      ('Panel2', '6/19/2020'): 165,
      ('Panel2', '6/26/2020'): 189},
     'D': {('Panel1', '5/15/2020'): 171,
      ('Panel1', '5/22/2020'): 172,
      ('Panel1', '5/29/2020'): 141,
      ('Panel1', '6/5/2020'): 153,
      ('Panel1', '6/12/2020'): 150,
      ('Panel1', '6/19/2020'): 101,
      ('Panel1', '6/26/2020'): 149,
      ('Panel2', '5/15/2020'): 171,
      ('Panel2', '5/22/2020'): 172,
      ('Panel2', '5/29/2020'): 141,
      ('Panel2', '6/5/2020'): 153,
      ('Panel2', '6/12/2020'): 150,
      ('Panel2', '6/19/2020'): 101,
      ('Panel2', '6/26/2020'): 149},
     'Dep': {('Panel1', '5/15/2020'): 673,
      ('Panel1', '5/22/2020'): 588,
      ('Panel1', '5/29/2020'): 553,
      ('Panel1', '6/5/2020'): 690,
      ('Panel1', '6/12/2020'): 785,
      ('Panel1', '6/19/2020'): 699,
      ('Panel1', '6/26/2020'): 569,
      ('Panel2', '5/15/2020'): 673,
      ('Panel2', '5/22/2020'): 588,
      ('Panel2', '5/29/2020'): 553,
      ('Panel2', '6/5/2020'): 690,
      ('Panel2', '6/12/2020'): 785,
      ('Panel2', '6/19/2020'): 699,
      ('Panel2', '6/26/2020'): 569},
     'Intercept': {('Panel1', '5/15/2020'): 1,
      ('Panel1', '5/22/2020'): 1,
      ('Panel1', '5/29/2020'): 1,
      ('Panel1', '6/5/2020'): 1,
      ('Panel1', '6/12/2020'): 1,
      ('Panel1', '6/19/2020'): 1,
      ('Panel1', '6/26/2020'): 1,
      ('Panel2', '5/15/2020'): 1,
      ('Panel2', '5/22/2020'): 1,
      ('Panel2', '5/29/2020'): 1,
      ('Panel2', '6/5/2020'): 1,
      ('Panel2', '6/12/2020'): 1,
      ('Panel2', '6/19/2020'): 1,
      ('Panel2', '6/26/2020'): 1},
     'F': {('Panel1', '5/15/2020'): 119,
      ('Panel1', '5/22/2020'): 165,
      ('Panel1', '5/29/2020'): 115,
      ('Panel1', '6/5/2020'): 139,
      ('Panel1', '6/12/2020'): 112,
      ('Panel1', '6/19/2020'): 116,
      ('Panel1', '6/26/2020'): 176,
      ('Panel2', '5/15/2020'): 119,
      ('Panel2', '5/22/2020'): 165,
      ('Panel2', '5/29/2020'): 115,
      ('Panel2', '6/5/2020'): 139,
      ('Panel2', '6/12/2020'): 112,
      ('Panel2', '6/19/2020'): 116,
      ('Panel2', '6/26/2020'): 176}}
    df_2=pd.DataFrame(df_2, columns=['A', 'B', 'C', 'D', 'Dep', 'Intercept', 'F'])
    df_2.index.names=["Panel","Date"]
    coef_input=pd.Series([3.24e+03, 6.00e+02, 1.00e+01, 9.00e-01, 3.24e+03, 1.00e+01,
       9.00e-01, 3.24e+03, 6.00e+02, 1.00e+01, 9.00e-01, 3.24e+03,
       1.00e+01, 9.00e-01],
         index=pd.MultiIndex.from_tuples([('Panel1', ('Intercept', 0, 1, 0)),
            ('Panel1',         ('A', 0, 1, 0)),
            ('Panel1',         ('B', 0, 1, 0)),
            ('Panel1',         ('C', 0, 1, 0)),
            ('Panel1', ('Intercept', 0, 1, 0)),
            ('Panel1',         ('B', 0, 1, 0)),
            ('Panel1',         ('D', 0, 1, 0)),
            ('Panel2', ('Intercept', 0, 1, 0)),
            ('Panel2',         ('A', 0, 1, 0)),
            ('Panel2',         ('B', 0, 1, 0)),
            ('Panel2',         ('C', 0, 1, 0)),
            ('Panel2', ('Intercept', 0, 1, 0)),
            ('Panel2',         ('B', 0, 1, 0)),
            ('Panel2',         ('D', 0, 1, 0))],
           names=['Panel', 'From']))
    node_input=pd.Series([('Dep', 0, 1, 0), ('Dep', 0, 1, 0), ('Dep', 0, 1, 0),
       ('Dep', 0, 1, 0), ('A', 0, 1, 0), ('A', 0, 1, 0), ('A', 0, 1, 0),
       ('Dep', 0, 1, 0), ('Dep', 0, 1, 0), ('Dep', 0, 1, 0),
       ('Dep', 0, 1, 0), ('C', 0, 1, 0), ('C', 0, 1, 0), ('C', 0, 1, 0)],
         index=pd.MultiIndex.from_tuples([('Panel1', ('Intercept', 0, 1, 0)),
            ('Panel1',         ('A', 0, 1, 0)),
            ('Panel1',         ('B', 0, 1, 0)),
            ('Panel1',         ('C', 0, 1, 0)),
            ('Panel1', ('Intercept', 0, 1, 0)),
            ('Panel1',         ('B', 0, 1, 0)),
            ('Panel1',         ('D', 0, 1, 0)),
            ('Panel2', ('Intercept', 0, 1, 0)),
            ('Panel2',         ('A', 0, 1, 0)),
            ('Panel2',         ('B', 0, 1, 0)),
            ('Panel2',         ('C', 0, 1, 0)),
            ('Panel2', ('Intercept', 0, 1, 0)),
            ('Panel2',         ('B', 0, 1, 0)),
            ('Panel2',         ('D', 0, 1, 0))],
           names=['Panel', 'From']))
    output=pd.DataFrame([[ 3.240000e+03,  9.000000e+04,  1.960000e+03,  1.332000e+02,
            -9.466020e+04],
           [ 3.240000e+03,  6.900000e+04,  1.500000e+03,  1.638000e+02,
            -7.331580e+04],
           [ 3.240000e+03,  9.960000e+04,  1.110000e+03,  1.458000e+02,
            -1.035428e+05],
           [ 3.240000e+03,  1.026000e+05,  1.480000e+03,  1.035000e+02,
            -1.067335e+05],
           [ 3.240000e+03,  1.170000e+05,  1.710000e+03,  1.539000e+02,
            -1.213189e+05],
           [ 3.240000e+03,  9.000000e+04,  1.790000e+03,  1.485000e+02,
            -9.447950e+04],
           [ 3.240000e+03,  7.620000e+04,  1.420000e+03,  1.701000e+02,
            -8.046110e+04],
           [ 3.240000e+03,  9.000000e+04,  1.960000e+03,  1.332000e+02,
            -9.466020e+04],
           [ 3.240000e+03,  6.900000e+04,  1.500000e+03,  1.638000e+02,
            -7.331580e+04],
           [ 3.240000e+03,  9.960000e+04,  1.110000e+03,  1.458000e+02,
            -1.035428e+05],
           [ 3.240000e+03,  1.026000e+05,  1.480000e+03,  1.035000e+02,
            -1.067335e+05],
           [ 3.240000e+03,  1.170000e+05,  1.710000e+03,  1.539000e+02,
            -1.213189e+05],
           [ 3.240000e+03,  9.000000e+04,  1.790000e+03,  1.485000e+02,
            -9.447950e+04],
           [ 3.240000e+03,  7.620000e+04,  1.420000e+03,  1.701000e+02,
            -8.046110e+04]],
                 index=pd.MultiIndex.from_tuples([('Panel1', '5/15/2020'),
                ('Panel1', '5/22/2020'),
                ('Panel1', '5/29/2020'),
                ('Panel1',  '6/5/2020'),
                ('Panel1', '6/12/2020'),
                ('Panel1', '6/19/2020'),
                ('Panel1', '6/26/2020'),
                ('Panel2', '5/15/2020'),
                ('Panel2', '5/22/2020'),
                ('Panel2', '5/29/2020'),
                ('Panel2',  '6/5/2020'),
                ('Panel2', '6/12/2020'),
                ('Panel2', '6/19/2020'),
                ('Panel2', '6/26/2020')],
               names=['Panel', 'Date']),
                 columns=pd.MultiIndex.from_tuples([(('Dep', 0, 1, 0), 'Intercept', 0, 1, 0),
                (('Dep', 0, 1, 0),         'A', 0, 1, 0),
                (('Dep', 0, 1, 0),         'B', 0, 1, 0),
                (('Dep', 0, 1, 0),         'C', 0, 1, 0),
                (('Dep', 0, 1, 0),  'Residual', 0, 1, 0)],
               names=[None, 'Variable', 'Adstock', 'Power', 'Lag']))
    pd.testing.assert_frame_equal(dp.apply_coef_node_(df_2, coef_input, node_input, node_input[0], 0), output)

    # node in only one panel
    output=pd.DataFrame([[ 3240. ,  1960. ,   153.9, -5205.9],
           [ 3240. ,  1500. ,   154.8, -4712.8],
           [ 3240. ,  1110. ,   126.9, -4314.9],
           [ 3240. ,  1480. ,   137.7, -4742.7],
           [ 3240. ,  1710. ,   135. , -4914. ],
           [ 3240. ,  1790. ,    90.9, -4955.9],
           [ 3240. ,  1420. ,   134.1, -4605.1]],
                 index=pd.MultiIndex.from_tuples([('Panel2', '5/15/2020'),
                ('Panel2', '5/22/2020'),
                ('Panel2', '5/29/2020'),
                ('Panel2',  '6/5/2020'),
                ('Panel2', '6/12/2020'),
                ('Panel2', '6/19/2020'),
                ('Panel2', '6/26/2020')],
               names=['Panel', 'Date']),
                 columns=pd.MultiIndex.from_tuples([(('C', 0, 1, 0), 'Intercept', 0, 1, 0),
                (('C', 0, 1, 0),         'B', 0, 1, 0),
                (('C', 0, 1, 0),         'D', 0, 1, 0),
                (('C', 0, 1, 0),  'Residual', 0, 1, 0)],
               names=[None, 'Variable', 'Adstock', 'Power', 'Lag']))
    pd.testing.assert_frame_equal(dp.apply_coef_node_(df_2, coef_input, node_input, node_input[11], 0), output)
